/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.4.6. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module serial
    ( // Inputs
      input  clk // clock
    , input  reset // reset
    , input  enable // enable
    , input  can_send
    , input [7:0] data_in
    , input  in_stb

      // Outputs
    , output wire [7:0] data_out
    , output wire  out_stb
    );
  // Lib.hs:23:1-36
  wire [8:0] c$ds_app_arg;
  // Puzzle.hs:(20,1)-(21,67)
  wire  c$ds_app_arg_0;
  // Puzzle.hs:(20,1)-(21,67)
  reg [5:0] maybeToBoola_c$ds_app_arg = {3'b000,1'd1,2'bxx};
  // Puzzle.hs:(20,1)-(21,67)
  wire [7:0] c$ds_app_arg_1;
  wire [6:0] result_0;
  // Puzzle.hs:(20,1)-(21,67)
  wire [7:0] a;
  wire [12:0] result_1;
  reg [6:0] result_2;
  wire [6:0] c$case_alt;
  reg [6:0] c$case_alt_0;
  // Puzzle.hs:103:1-9
  wire [1:0] dir;
  wire [6:0] c$case_alt_1;
  wire [6:0] c$case_alt_2;
  wire [6:0] c$case_alt_3;
  // Puzzle.hs:103:1-9
  wire [3:0] a1;
  // Puzzle.hs:103:1-9
  reg [4:0] \inp' ;
  // Puzzle.hs:103:1-9
  wire signed [63:0] \c$inp'_app_arg ;
  reg [5:0] c$app_arg;
  wire [5:0] c$case_alt_4;
  reg [5:0] c$case_alt_5;
  reg [5:0] c$case_alt_6;
  // Puzzle.hs:103:1-9
  wire [0:0] ctr;
  // Puzzle.hs:103:1-9
  wire [1:0] ctr_0;
  // Puzzle.hs:103:1-9
  wire [2:0] ctr_1;
  reg [5:0] result_3;
  reg [5:0] c$case_alt_7;
  reg [5:0] c$case_alt_8;
  reg [5:0] c$case_alt_9;
  wire [20:0] c$case_scrut;
  // Puzzle.hs:103:1-9
  wire signed [63:0] wild;
  // Puzzle.hs:103:1-9
  wire signed [63:0] c$wild_app_arg;
  // Puzzle.hs:(36,1)-(37,69)
  wire  c$ds_app_arg_2;
  // Puzzle.hs:(36,1)-(37,69)
  reg [31:0] maybeToBoola_c$ds_app_arg_0 = {16'd0,   16'd0};
  // Puzzle.hs:(36,1)-(37,69)
  wire [5:0] c$ds_app_arg_3;
  wire [32:0] result_4;
  // Puzzle.hs:(36,1)-(37,69)
  wire [5:0] a_0;
  // Puzzle.hs:54:1-9
  wire signed [63:0] c$r_app_arg;
  wire [15:0] result_5;
  // Puzzle.hs:54:1-9
  wire signed [63:0] c$ds1_app_arg;
  wire [16:0] r;
  wire [15:0] result_6;
  // Puzzle.hs:54:1-9
  wire signed [63:0] c$r_app_arg_0;
  wire [15:0] result_7;
  reg [32:0] c$app_arg_0;
  wire [64:0] result_8;
  // Puzzle.hs:54:1-9
  wire [15:0] x;
  // Puzzle.hs:54:1-9
  wire [15:0] y;
  // Puzzle.hs:54:1-9
  wire [3:0] n;
  // Puzzle.hs:54:1-9
  wire [3:0] n_0;
  // Puzzle.hs:54:1-9
  wire [3:0] n_1;
  // Puzzle.hs:54:1-9
  reg [31:0] ds1;
  // Puzzle.hs:54:1-9
  wire [16:0] r_0;
  // Puzzle.hs:54:1-9
  wire [16:0] r_1;
  // Puzzle.hs:(66,1)-(67,68)
  reg [36:0] maybeToBoola_c$ds_app_arg_1 = {{1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx},   4'd0};
  wire [8:0] result_9;
  wire [45:0] c$case_alt_10;
  wire [8:0] c$app_arg_1;
  wire [8:0] c$case_alt_11;
  wire [7:0] result_10;
  wire signed [63:0] c$app_arg_2;
  wire signed [63:0] c$app_arg_3;
  // Puzzle.hs:74:1-15
  wire [31:0] a_1;
  wire [3:0] c$app_arg_4;
  wire [4:0] z;
  wire [3:0] result_11;
  // Puzzle.hs:74:1-15
  wire [3:0] digitIdx;
  wire [32:0] c$app_arg_5;
  // Puzzle.hs:74:1-15
  wire [31:0] n_2;
  // Puzzle.hs:74:1-15
  wire [32:0] number;
  // Lib.hs:(27,1)-(28,72)
  reg [265:0] maybeToBoola_c$ds_app_arg_2 = {{8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,
  8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,
  8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,
  8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,
  8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,
  8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,
  8'b00000001,   8'b00000001},   5'd0,   5'd0};
  wire [8:0] result_12;
  // Lib.hs:45:1-15
  wire signed [63:0] c$wild3_app_arg;
  wire [255:0] result_13;
  wire [255:0] c$app_arg_6;
  wire [4:0] c$app_arg_7;
  wire [4:0] c$app_arg_8;
  // Lib.hs:45:1-15
  wire signed [63:0] c$wild3_app_arg_0;
  wire [7:0] result_14;
  wire [8:0] c$app_arg_9;
  wire [274:0] result_15;
  // Lib.hs:45:1-15
  wire  canSend;
  // Lib.hs:45:1-15
  wire [7:0] a_2;
  // Lib.hs:45:1-15
  wire signed [63:0] wild3;
  // Lib.hs:45:1-15
  wire signed [63:0] wild3_0;
  // Lib.hs:45:1-15
  wire  doSend;
  // Lib.hs:45:1-15
  wire [4:0] readPointer1;
  // Lib.hs:45:1-15
  wire [4:0] writePointer1;
  // Lib.hs:45:1-15
  wire [255:0] memory1;
  // Lib.hs:23:1-36
  wire [7:0] a1_0;
  wire [9:0] eta;
  wire [7:0] c$bv;
  wire signed [63:0] result_selection_res;
  wire [0:0] c$case_alt_selection_9;
  wire [16:0] c$bv_0;
  wire [16:0] c$bv_1;
  wire [16:0] c$bv_2;
  wire [31:0] c$i_29;
  wire [31:0] c$i_31;
  wire [8:0] result;

  assign eta = {can_send,   data_in,   in_stb};

  assign c$ds_app_arg = eta[0:0] ? {1'b1,eta[8:1]} : {1'b0,8'bxxxxxxxx};

  assign c$ds_app_arg_0 = c$ds_app_arg[8:8] ? 1'b1 : 1'b0;

  // register begin
  always @(posedge clk or  posedge  reset) begin : maybeToBoola_c$ds_app_arg_register
    if ( reset) begin
      maybeToBoola_c$ds_app_arg <= {3'b000,1'd1,2'bxx};
    end else if (c$ds_app_arg_0) begin
      maybeToBoola_c$ds_app_arg <= result_1[12:7];
    end
  end
  // register end

  assign c$ds_app_arg_1 = c$ds_app_arg[8:8] ? a : 8'b00000111;

  assign result_0 = result_1[6:0];

  assign a = c$ds_app_arg[7:0];

  assign result_1 = {c$app_arg,   result_2};

  always @(*) begin
    case(maybeToBoola_c$ds_app_arg[5:3])
      3'b100 : result_2 = c$case_alt_0;
      3'b101 : result_2 = c$case_alt;
      default : result_2 = {1'b0,6'bxxxxxx};
    endcase
  end

  assign c$case_alt = \inp' [4:4] ? {1'b1,{2'b11,4'bxxxx}} : {1'b0,6'bxxxxxx};

  always @(*) begin
    case(dir)
      2'b00 : c$case_alt_0 = c$case_alt_3;
      2'b01 : c$case_alt_0 = c$case_alt_2;
      default : c$case_alt_0 = c$case_alt_1;
    endcase
  end

  assign dir = maybeToBoola_c$ds_app_arg[2:1];

  assign c$case_alt_1 = \inp' [4:4] ? {1'b1,{2'b10,a1}} : {1'b0,6'bxxxxxx};

  assign c$case_alt_2 = \inp' [4:4] ? {1'b1,{2'b01,a1}} : {1'b0,6'bxxxxxx};

  assign c$case_alt_3 = \inp' [4:4] ? {1'b1,{2'b00,a1}} : {1'b0,6'bxxxxxx};

  assign a1 = \inp' [3:0];

  always @(*) begin
    case(c$ds_app_arg_1)
      8'b00000111 : \inp'  = {1'b0,4'bxxxx};
      default : \inp'  = {1'b1,$unsigned(\c$inp'_app_arg [0+:4])};
    endcase
  end

  assign c$bv = (c$ds_app_arg_1 & 8'b00001111);

  assign \c$inp'_app_arg  = $unsigned({{(64-8) {1'b0}},c$bv});

  always @(*) begin
    case(maybeToBoola_c$ds_app_arg[5:3])
      3'b000 : c$app_arg = result_3;
      3'b001 : c$app_arg = c$case_alt_6;
      3'b010 : c$app_arg = c$case_alt_5;
      3'b011 : c$app_arg = c$case_alt_4;
      3'b100 : c$app_arg = {3'b000,1'd0,2'bxx};
      3'b101 : c$app_arg = {3'b110,3'bxxx};
      default : c$app_arg = {3'b110,3'bxxx};
    endcase
  end

  assign c$case_alt_4 = ctr ? {3'b011,ctr - 1'd1,2'bxx} : {3'b100,2'd1,1'bx};

  always @(*) begin
    case(ctr_0)
      2'd0 : c$case_alt_5 = {3'b100,2'd2,1'bx};
      default : c$case_alt_5 = {3'b010,ctr_0 - 2'd1,1'bx};
    endcase
  end

  always @(*) begin
    case(ctr_1)
      3'd0 : c$case_alt_6 = {3'b100,2'd0,1'bx};
      default : c$case_alt_6 = {3'b001,ctr_1 - 3'd1};
    endcase
  end

  assign ctr = maybeToBoola_c$ds_app_arg[2:2];

  assign ctr_0 = maybeToBoola_c$ds_app_arg[2:1];

  assign ctr_1 = maybeToBoola_c$ds_app_arg[2:0];

  assign result_selection_res = (($unsigned(wild)) <= 64'd1114111) ? 64'sd1 : 64'sd0;

  always @(*) begin
    case(result_selection_res)
      64'sd1 : result_3 = c$case_alt_7;
      default : result_3 = {6 {1'bx}};
    endcase
  end

  assign c$case_alt_selection_9 = maybeToBoola_c$ds_app_arg[2:2];

  always @(*) begin
    case(c$case_alt_selection_9)
      1'd0 : c$case_alt_7 = c$case_alt_9;
      1'd1 : c$case_alt_7 = c$case_alt_8;
      default : c$case_alt_7 = {6 {1'bx}};
    endcase
  end

  always @(*) begin
    case(c$case_scrut)
      21'd10 : c$case_alt_8 = {3'b101,3'bxxx};
      21'd100 : c$case_alt_8 = {3'b010,2'd3,1'bx};
      21'd102 : c$case_alt_8 = {3'b001,3'd6};
      21'd117 : c$case_alt_8 = {3'b011,1'd1,2'bxx};
      default : c$case_alt_8 = {6 {1'bx}};
    endcase
  end

  always @(*) begin
    case(c$case_scrut)
      21'd10 : c$case_alt_9 = {3'b000,1'd1,2'bxx};
      default : c$case_alt_9 = {6 {1'bx}};
    endcase
  end

  assign c$case_scrut = $unsigned(wild[0+:21]);

  assign wild = $signed(c$wild_app_arg);

  assign c$wild_app_arg = $unsigned({{(64-8) {1'b0}},c$ds_app_arg_1});

  assign c$ds_app_arg_2 = result_0[6:6] ? 1'b1 : 1'b0;

  // register begin
  always @(posedge clk or  posedge  reset) begin : maybeToBoola_c$ds_app_arg_0_register
    if ( reset) begin
      maybeToBoola_c$ds_app_arg_0 <= {16'd0,   16'd0};
    end else if (c$ds_app_arg_2) begin
      maybeToBoola_c$ds_app_arg_0 <= result_8[64:33];
    end
  end
  // register end

  assign c$ds_app_arg_3 = result_0[6:6] ? a_0 : {2'b00,4'd0};

  assign result_4 = result_8[32:0];

  assign a_0 = result_0[5:0];

  assign c$r_app_arg = $unsigned({{(64-4) {1'b0}},n});

  assign c$bv_0 = (r_0);

  assign result_5 = (( c$bv_0[17-1] ) == 1'b0) ? (r_0[0+:16]) : 16'd65535;

  assign c$ds1_app_arg = $unsigned({{(64-4) {1'b0}},n_1});

  assign r =  y - ($unsigned(c$ds1_app_arg[0+:16]));

  assign c$bv_1 = (r);

  assign result_6 = (( c$bv_1[17-1] ) == 1'b0) ? (r[0+:16]) : (16'd0);

  assign c$r_app_arg_0 = $unsigned({{(64-4) {1'b0}},n_0});

  assign c$bv_2 = (r_1);

  assign result_7 = (( c$bv_2[17-1] ) == 1'b0) ? (r_1[0+:16]) : 16'd65535;

  always @(*) begin
    case(c$ds_app_arg_3[5:4])
      2'b11 : c$app_arg_0 = {1'b1,({{(32-16) {1'b0}},x}) * ({{(32-16) {1'b0}},y})};
      default : c$app_arg_0 = {1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};
    endcase
  end

  assign result_8 = {{ds1[31:16],   ds1[15:0]},
                     c$app_arg_0};

  assign x = maybeToBoola_c$ds_app_arg_0[31:16];

  assign y = maybeToBoola_c$ds_app_arg_0[15:0];

  assign n = c$ds_app_arg_3[3:0];

  assign n_0 = c$ds_app_arg_3[3:0];

  assign n_1 = c$ds_app_arg_3[3:0];

  always @(*) begin
    case(c$ds_app_arg_3[5:4])
      2'b00 : ds1 = {result_5,   y};
      2'b01 : ds1 = {x,   result_6};
      2'b10 : ds1 = {x,   result_7};
      default : ds1 = maybeToBoola_c$ds_app_arg_0;
    endcase
  end

  assign r_0 = x + ($unsigned(c$r_app_arg[0+:16]));

  assign r_1 = y + ($unsigned(c$r_app_arg_0[0+:16]));

  // register begin
  always @(posedge clk or  posedge  reset) begin : maybeToBoola_c$ds_app_arg_1_register
    if ( reset) begin
      maybeToBoola_c$ds_app_arg_1 <= {{1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx},   4'd0};
    end else if (enable) begin
      maybeToBoola_c$ds_app_arg_1 <= c$case_alt_10[45:9];
    end
  end
  // register end

  assign result_9 = c$case_alt_10[8:0];

  assign c$case_alt_10 = {{c$app_arg_5,
                           c$app_arg_4},   c$app_arg_1};

  assign c$app_arg_1 = (digitIdx < 4'd8) ? c$case_alt_11 : {1'b0,8'bxxxxxxxx};

  assign c$case_alt_11 = number[32:32] ? {1'b1,result_10} : {1'b0,8'bxxxxxxxx};

  assign result_10 = (a_1 <= 32'd9) ? ($unsigned(c$app_arg_2[0+:8])) : ($unsigned(c$app_arg_3[0+:8]));

  assign c$i_29 = (32'd48 | a_1);

  assign c$app_arg_2 = $unsigned({{(64-32) {1'b0}},c$i_29});

  assign c$i_31 = (a_1 + 32'd87);

  assign c$app_arg_3 = $unsigned({{(64-32) {1'b0}},c$i_31});

  assign a_1 = n_2 >> (64'sd28);

  assign c$app_arg_4 = number[32:32] ? result_11 : 4'd0;

  assign z = digitIdx + 4'd1;

  assign result_11 = (z > 5'd8) ? 4'd8 : (z[0+:4]);

  assign digitIdx = maybeToBoola_c$ds_app_arg_1[3:0];

  assign c$app_arg_5 = number[32:32] ? {1'b1,n_2 << (64'sd4)} : result_4;

  assign n_2 = number[31:0];

  assign number = maybeToBoola_c$ds_app_arg_1[36:4];

  // register begin
  always @(posedge clk or  posedge  reset) begin : maybeToBoola_c$ds_app_arg_2_register
    if ( reset) begin
      maybeToBoola_c$ds_app_arg_2 <= {{8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,
    8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,
    8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,
    8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,
    8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,
    8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,   8'b00000001,
    8'b00000001,   8'b00000001},   5'd0,   5'd0};
    end else if (enable) begin
      maybeToBoola_c$ds_app_arg_2 <= result_15[274:9];
    end
  end
  // register end

  assign result_12 = result_15[8:0];

  assign c$wild3_app_arg = $unsigned({{(64-5) {1'b0}},writePointer1});

  // vector replace begin
  genvar i;
  generate
  for (i=0;i<32;i=i+1) begin : vector_replace
    assign result_13[(31-i)*8+:8] = (wild3) == i ? a_2 : memory1[(31-i)*8+:8];
  end
  endgenerate
  // vector replace end

  assign c$app_arg_6 = result_9[8:8] ? result_13 : memory1;

  assign c$app_arg_7 = result_9[8:8] ? (writePointer1 + 5'd1) : writePointer1;

  assign c$app_arg_8 = doSend ? (readPointer1 + 5'd1) : readPointer1;

  assign c$wild3_app_arg_0 = $unsigned({{(64-5) {1'b0}},readPointer1});

  // index begin
  wire [7:0] vecArray [0:32-1];
  genvar i_0;
  generate
  for (i_0=0; i_0 < 32; i_0=i_0+1) begin : mk_array
    assign vecArray[(32-1)-i_0] = memory1[i_0*8+:8];
  end
  endgenerate
  assign result_14 = vecArray[(wild3_0)];
  // index end

  assign c$app_arg_9 = doSend ? {1'b1,result_14} : {1'b0,8'bxxxxxxxx};

  assign result_15 = {{c$app_arg_6,
                       c$app_arg_7,   c$app_arg_8},   c$app_arg_9};

  assign canSend = eta[9:9];

  assign a_2 = result_9[7:0];

  assign wild3 = $signed(c$wild3_app_arg);

  assign wild3_0 = $signed(c$wild3_app_arg_0);

  assign doSend = canSend ? (writePointer1 > readPointer1) : 1'b0;

  assign readPointer1 = maybeToBoola_c$ds_app_arg_2[4:0];

  assign writePointer1 = maybeToBoola_c$ds_app_arg_2[9:5];

  assign memory1 = maybeToBoola_c$ds_app_arg_2[265:10];

  assign result = result_12[8:8] ? {a1_0,
                                    1'b1} : {{8 {1'bx}},   1'b0};

  assign a1_0 = result_12[7:0];

  assign data_out = result[8:1];

  assign out_stb = result[0:0];


endmodule

